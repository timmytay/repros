#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <regex>
#include <random>
#include <ctime>
#include <unordered_map>
#include <Windows.h>
using namespace std;

// Глобальный генератор случайных чисел
mt19937 rng(random_device{}());

// Функция для добавления недостижимого кода в случайное место каждой функции
string addUnreachableCodeToEachFunction(const string& code);

// Функция для генерации случайного имени
string generateRandomName(unordered_map<string, string>& nameMap);

// Функции для удаления комментариев и пустых строк
void deleteComments(string& givenCode);

// Обновленная функция для удаления пустых строк и строк, содержащих только пробелы
void deleteEmptyLines(string& givenCode);

// Функция для редактирования файла и замены переменных и функций
string editAndObfuscateCode(string givenCode);

// Функция для печати и чтения результата

void readAndPrintResult(const string& filePath);

// Главная функция
int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    string filePath;
    cout << "Введите название файла: "; cin >> filePath;

    // Читаем содержимое исходного файла в строку
    ifstream fileIn(filePath);
    if (!fileIn) {
        cerr << "Не удалось открыть файл." << endl;
        return 1;
    }
    stringstream buffer;
    buffer << fileIn.rdbuf();
    string code = buffer.str();
    fileIn.close();

    // Редактируем и обфусцируем код
    string obfuscatedCode = editAndObfuscateCode(code);

    // Добавляем недостижимый код
    string finalCode = addUnreachableCodeToEachFunction(obfuscatedCode);

    // Записываем модифицированный код в новый файл
    ofstream fileOut("output.txt");
    if (!fileOut) {
        cerr << "Не удалось открыть файл для записи." << endl;
        return 1;
    }
    fileOut << finalCode;
    fileOut.close();

    cout << "Обработка файла завершена. Результат записан в output.txt" << endl;

    // Читаем и выводим результат
    readAndPrintResult("output.txt");

    return 0;
}

// Прототипы функций

// Функция для печати и чтения результата
void readAndPrintResult(const string& filePath) {
    ifstream fileInResult(filePath);
    if (!fileInResult) {
        cerr << "Не удалось открыть файл " << filePath << " для чтения." << endl;
        return;
    }
    string line;
    cout << "\nРезультат:\n";
    while (getline(fileInResult, line)) {
        cout << line << endl;
    }
    fileInResult.close();
}
