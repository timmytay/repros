#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <regex>
#include <random>
#include <ctime>
#include <unordered_map>
#include <Windows.h>
using namespace std;

// Глобальный генератор случайных чисел
mt19937 rng(random_device{}());

// Функция для добавления недостижимого кода в случайное место каждой функции
string addUnreachableCodeToEachFunction(const string& code);

// Функция для генерации случайного имени
string generateRandomName(unordered_map<string, string>& nameMap);

// Функции для удаления комментариев и пустых строк
void deleteComments(string& givenCode);

// Обновленная функция для удаления пустых строк и строк, содержащих только пробелы
void deleteEmptyLines(string& givenCode);

// Функция для редактирования файла и замены переменных и функций
string editAndObfuscateCode(string givenCode);

// Функция для печати и чтения результата

void readAndPrintResult(const string& filePath);

// Главная функция
int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    string filePath;
    cout << "Введите название файла: "; cin >> filePath;

    // Читаем содержимое исходного файла в строку
    ifstream fileIn(filePath);
    if (!fileIn) {
        cerr << "Не удалось открыть файл." << endl;
        return 1;
    }
    stringstream buffer;
    buffer << fileIn.rdbuf();
    string code = buffer.str();
    fileIn.close();

    // Редактируем и обфусцируем код
    string obfuscatedCode = editAndObfuscateCode(code);

    // Добавляем недостижимый код
    string finalCode = addUnreachableCodeToEachFunction(obfuscatedCode);

    // Записываем модифицированный код в новый файл
    ofstream fileOut("output.txt");
    if (!fileOut) {
        cerr << "Не удалось открыть файл для записи." << endl;
        return 1;
    }
    fileOut << finalCode;
    fileOut.close();

    cout << "Обработка файла завершена. Результат записан в output.txt" << endl;

    // Читаем и выводим результат
    readAndPrintResult("output.txt");

    return 0;
}

// Прототипы функций

// Функция для печати и чтения результата
void readAndPrintResult(const string& filePath) {
    ifstream fileInResult(filePath);
    if (!fileInResult) {
        cerr << "Не удалось открыть файл " << filePath << " для чтения." << endl;
        return;
    }
    string line;
    cout << "\nРезультат:\n";
    while (getline(fileInResult, line)) {
        cout << line << endl;
    }
    fileInResult.close();
}
// Функция для добавления недостижимого кода в случайное место каждой функции
string addUnreachableCodeToEachFunction(const string& code) {
    // Регулярное выражение для поиска определений всех функций
    regex functionRegex("(\\w+\\s+\\w+\\s*\\(.*\\)\\s*\\{)");

    // Варианты недостижимого кода для добавления
    vector<string> unreachableCodeSamples = {
        "\n    if (0) {\n        cout <<\"Этот код никогда не выполнится.\" << endl;\n    }",
        "\n    goto skip_code;\n    unreachable_code:\n    cout <<\"Этот код никогда не выполнится.\" << endl;\n    skip_code:",
        "\n    while (false) {\n        cout << \"Этот код никогда не выполнится.\" << endl;\n    }"
    };

    uniform_int_distribution<mt19937::result_type> dist(1, 100); // Распределение от 1 до 100
    uniform_int_distribution<mt19937::result_type> codeDist(0, unreachableCodeSamples.size() - 1); // Для выбора варианта кода

    size_t searchStartPos = 0; // Начальная позиция для поиска функций
    string modifiedCode = code;

    // Проходим через все функции и добавляем один из вариантов недостижимого кода в случайное место с вероятностью 50%
    while (true) {
        sregex_iterator iter(modifiedCode.begin() + searchStartPos, modifiedCode.end(), functionRegex);
        if (iter == sregex_iterator()) break; // Если функции не найдены, выходим из цикла

        smatch match = *iter;
        size_t functionStartPos = match.position() + searchStartPos;
        size_t functionEndPos = modifiedCode.find("}", functionStartPos);
        if (functionEndPos != string::npos) {
            // Генерируем случайное число и решаем, вставлять ли недостижимый код
            if (dist(rng) <= 50) { // 50% вероятность вставки недостижимого кода
                string unreachableCode = unreachableCodeSamples[codeDist(rng)]; // Выбираем случайный вариант кода
                size_t insertPos = functionStartPos + match.length();
                modifiedCode.insert(insertPos, unreachableCode);
                searchStartPos = insertPos + unreachableCode.length(); // Обновляем позицию для поиска следующей функции
            } else {
                searchStartPos = functionEndPos + 1; // Пропускаем функцию без добавления кода
            }
        } else {
            searchStartPos += match.length(); // Обновляем позицию для поиска следующей функции
        }
    }

    return modifiedCode;
}
